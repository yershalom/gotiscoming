{"version":3,"sources":["components/Countdown/Countdown.js","App.js","serviceWorker.js","index.js"],"names":["addZero","num","toString","length","concat","defaultStyles","height","margin","padding","display","justifyContent","alignItems","flexDirection","fontSize","fontFamily","letterSpacing","textShadow","textTransform","marginBottom","Seperator","react_default","a","createElement","Day","_ref","days","style","Object","objectSpread","Hour","_ref2","hours","Minutes","_ref3","minutes","Seconds","_ref4","seconds","renderer","_ref5","Countdown_Day","Countdown_Seperator","Countdown_Hour","Countdown_Minutes","Countdown_Seconds","Countdown","index_es","key","date","Date","now","App","className","components_Countdown_Countdown","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea2e121e.chunk.js","sourcesContent":["import React from 'react';\nimport Countdowner from 'react-countdown-now';\nimport './Countdown.css';\n\nconst addZero = num => {\n  return num.toString().length === 1 ? `0${num}` : num;\n};\n\nconst defaultStyles = {\n  clockStyle: {\n    height: '8rem',\n    margin: 0,\n    padding: 0,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row',\n    fontSize: '150px',\n    fontFamily: 'sans-serif',\n    letterSpacing: '5px',\n    textShadow: '0 0 10px #fff',\n    textTransform: 'uppercase'\n  },\n  clockHeaderStyle: {\n    margin: '13px',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  clockSubHeader: {\n    marginBottom: '10px',\n    fontSize: '23px',\n    letterSpacing: 'initial'\n  }\n};\n\nconst Seperator = () => {\n  return <span>.</span>;\n}\n\nconst Day = ({days}) => {\n  return <div>\n        <div style={{ ...defaultStyles.clockHeaderStyle }}>\n          <div style={{ ...defaultStyles.clockSubHeader }}> days </div>\n          <div>{addZero(days)}</div>\n        </div>\n  </div>;\n}\n\nconst Hour = ({hours}) => {\n  return <div style={{ ...defaultStyles.clockHeaderStyle }}>\n    <div style={{ ...defaultStyles.clockSubHeader }}> hours </div>\n    <div>{addZero(hours)}</div>\n  </div>;\n}\n\nconst Minutes = ({minutes}) => {\n  return <div style={{ ...defaultStyles.clockHeaderStyle }}>\n    <div style={{ ...defaultStyles.clockSubHeader }}> minutes </div>\n    <div>{addZero(minutes)}</div>\n  </div>\n}\n\nconst Seconds = ({seconds}) => {\n  return <div style={{ ...defaultStyles.clockHeaderStyle }}>\n    <div style={{ ...defaultStyles.clockSubHeader }}> seconds </div>\n    <div>{addZero(seconds)}</div>\n  </div>\n}\n\nconst renderer = ({ days, hours, minutes, seconds }) => {\n  return (\n    <div style={{...defaultStyles.clockStyle}}>\n      <Day days={days} />\n      <Seperator />\n      <Hour hours={hours} />\n      <Seperator />\n      <Minutes minutes={minutes} />\n      <Seperator />\n      <Seconds seconds={seconds} />\n    </div>\n  );\n};\n\nconst renderDate = () => {\n  return Date.now() + (1555272000 * 1000 - Date.now());\n}\n\nconst Countdown = () => {\n  return (\n    <div>\n      <Countdowner\n        renderer={renderer}\n        key={`1`}\n        date={renderDate()}/>\n    </div>\n  )\n}\n\nexport default Countdown;\n","import React, { PureComponent } from 'react';\nimport './App.css';\nimport Countdown from './components/Countdown/Countdown';\n\nclass App extends PureComponent {\n\n  render() {\n    return (\n      <div className={`App`}>\n        <div>\n          <Countdown />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}